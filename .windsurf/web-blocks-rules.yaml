# ChaiBuilder SDK Web Blocks Rules
# Specific rules for web blocks development within the ChaiBuilder SDK

version: 1.0.0

# Block structure and organization
structure:
  - Each block should be in its own directory within the web-blocks folder
  - Block directories should follow a consistent structure:
      - index.tsx: Main block export
      - block-name.tsx: Block implementation
      - settings.tsx: Block settings panel
      - types.ts: Block-specific types
      - utils.ts: Block-specific utilities
  - Blocks should be organized by category or functionality
  - Use named exports for blocks
  - Each block should have a unique identifier

# Block implementation
implementation:
  - Blocks should be implemented as functional components
  - Use TypeScript for type safety
  - Blocks should be pure and predictable
  - Blocks should handle their own state or use provided state management
  - Implement proper prop validation
  - Handle edge cases and error states
  - Support responsive design
  - Follow the project's design system
  - Implement proper accessibility features

# Block settings
settings:
  - Each block should have configurable settings
  - Settings should be grouped logically
  - Provide sensible default values
  - Validate settings input
  - Provide clear labels and descriptions
  - Use appropriate input components for different setting types
  - Support responsive settings
  - Implement proper form validation

# Block rendering
rendering:
  - Blocks should render consistently across different environments
  - Support server-side rendering
  - Handle loading and error states
  - Implement proper cleanup
  - Optimize rendering performance
  - Support different rendering modes (edit, preview, production)
  - Handle dynamic content

# Block styling
styling:
  - Use Tailwind CSS for styling blocks
  - Follow utility-first approach
  - Support theme customization
  - Ensure responsive design
  - Use consistent spacing and sizing
  - Support dark mode when appropriate
  - Implement proper hover, focus, and active states
  - Support animation and transitions

# Block interactions
interactions:
  - Implement drag and drop functionality
  - Support selection and multi-selection
  - Implement resize and positioning
  - Support keyboard navigation
  - Implement proper focus management
  - Handle user interactions consistently
  - Provide appropriate feedback for user actions

# Block API
api:
  - Blocks should expose a consistent API
  - Document the block's API
  - Support event handling
  - Provide methods for programmatic control
  - Implement proper lifecycle methods
  - Support external data sources
  - Handle data updates efficiently

# Block testing
testing:
  - Write tests for all blocks
  - Test block rendering
  - Test block interactions
  - Test block settings
  - Test edge cases and error states
  - Test accessibility
  - Test performance

# Block documentation
documentation:
  - Document block purpose and usage
  - Document block settings and their effects
  - Document block API
  - Provide examples of block usage
  - Document any performance considerations
  - Keep documentation up-to-date with code changes
  - Include visual examples or screenshots

# Block performance
performance:
  - Optimize initial render
  - Minimize re-renders
  - Optimize asset loading
  - Implement code splitting
  - Lazy load block components
  - Optimize bundle size
  - Monitor and improve performance metrics
