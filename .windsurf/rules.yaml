# ChaiBuilder SDK Windsurf Rules
# These rules define coding standards and best practices for the project

version: 1.0.0

# General project rules
project:
  name: ChaiBuilder SDK
  description: Open Source Tailwind Builder - A Low Code React + Tailwind CSS Visual Builder
  
# File structure rules
file_structure:
  # Define allowed directory structures
  directories:
    - name: src
      required: true
      description: Source code directory
      rules:
        - All application code must be placed in appropriate subdirectories
        - No loose files at the root level except for entry points
    - name: src/core
      required: true
      description: Core functionality of the SDK
    - name: src/ui
      required: true
      description: UI components
    - name: src/web-blocks
      required: true
      description: Web block components
    - name: src/render
      required: true
      description: Rendering engine
    - name: src/types
      required: true
      description: TypeScript type definitions
    - name: src/tailwind
      required: true
      description: Tailwind configuration and utilities
  
  # File naming conventions
  naming:
    - pattern: "*.tsx"
      rule: PascalCase for component files
    - pattern: "*.ts"
      rule: camelCase for utility and helper files
    - pattern: "*.test.{ts,tsx}"
      rule: Should match the name of the file being tested
    - pattern: "*.d.ts"
      rule: camelCase for type declaration files

# Code style rules
code_style:
  typescript:
    - Use TypeScript for all new code
    - Prefer interfaces over type aliases for object types
    - Use type annotations for function parameters and return types
    - Use generics when appropriate to create reusable components
    - Avoid using 'any' type when possible
  
  react:
    - Use functional components with hooks instead of class components
    - Keep components small and focused on a single responsibility
    - Use React.memo for performance optimization when appropriate
    - Extract reusable logic into custom hooks
    - Follow the React hooks rules (only call hooks at the top level)
    - Use the useCallback hook for functions passed to child components
  
  imports:
    - Group imports in the following order: external libraries, internal modules, types, styles
    - Use absolute imports for project modules
    - Avoid circular dependencies
  
  formatting:
    - Use 2 spaces for indentation
    - Maximum line length of 100 characters
    - Use semicolons at the end of statements
    - Use double quotes for strings
    - Add trailing commas in multi-line object/array literals

# Component rules
components:
  - All components should be pure functional components
  - Components should be properly typed with TypeScript
  - Extract complex logic from components into hooks or utility functions
  - Components should have descriptive names that reflect their purpose
  - Components should be placed in appropriate directories based on their functionality
  - Use composition over inheritance
  - Follow atomic design principles where appropriate

# State management rules
state_management:
  - Use Jotai for global state management
  - Keep state as local as possible
  - Use React context for theme and configuration that needs to be accessed by many components
  - Document the purpose and structure of atoms
  - Avoid direct mutation of state

# Performance rules
performance:
  - Minimize re-renders by using React.memo, useMemo, and useCallback appropriately
  - Lazy load components when possible
  - Optimize bundle size by avoiding unnecessary dependencies
  - Use code splitting for large components or features
  - Monitor and optimize render performance

# Testing rules
testing:
  - Write unit tests for all utility functions
  - Write component tests for complex components
  - Use testing-library for component testing
  - Mock external dependencies in tests
  - Aim for high test coverage of critical paths

# Documentation rules
documentation:
  - Document all public APIs
  - Add JSDoc comments to functions and components
  - Keep documentation up-to-date with code changes
  - Include examples in documentation when appropriate
  - Document complex logic with inline comments

# Accessibility rules
accessibility:
  - Ensure all components are accessible
  - Use semantic HTML elements
  - Include appropriate ARIA attributes
  - Ensure keyboard navigation works properly
  - Support screen readers
  - Maintain sufficient color contrast

# Security rules
security:
  - Sanitize user input
  - Avoid using dangerouslySetInnerHTML when possible
  - Keep dependencies updated to avoid security vulnerabilities
  - Use secure authentication methods
  - Implement proper error handling
